import {
    Box,
    Button,
    Menu,
    MenuButton,
    MenuList,
    MenuItem,
    MenuDivider,
    Icon,
    Text,
    VStack,
    HStack,
    useToast,
    Tooltip
} from "@chakra-ui/react";
import { FiDownload, FiFileText, FiImage, FiShare2, FiMail } from "react-icons/fi";

export default function ExportTools({ data, filters }) {
    const toast = useToast();

    const exportToCSV = () => {
        try {
            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è CSV
            const headers = [
                'ID',
                '–î–∞—Ç–∞',
                '–ó–∞–≥–æ–ª–æ–≤–æ–∫',
                '–†–µ–π—Ç–∏–Ω–≥',
                '–ì–æ—Ä–æ–¥',
                '–¢–µ–º—ã',
                '–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏—è',
                '–¢–µ–∫—Å—Ç'
            ];

            const csvData = data.map(item => [
                item.id || '',
                item.date || '',
                (item.title || '').replace(/"/g, '""'),
                item.rating || '',
                item.city || '',
                (item.topics || []).join('; '),
                (item.sentiments || []).join('; '),
                (item.text || '').replace(/"/g, '""').substring(0, 500) + '...'
            ]);

            // –°–æ–∑–¥–∞–µ–º CSV –∫–æ–Ω—Ç–µ–Ω—Ç
            const csvContent = [
                headers.join(','),
                ...csvData.map(row =>
                    row.map(cell => `"${cell}"`).join(',')
                )
            ].join('\n');

            // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            const url = URL.createObjectURL(blob);
            link.setAttribute('href', url);
            link.setAttribute('download', `reviews_export_${new Date().toISOString().split('T')[0]}.csv`);
            link.style.visibility = 'hidden';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);

            toast({
                title: "–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω",
                description: `–í—ã–≥—Ä—É–∂–µ–Ω–æ ${data.length} –æ—Ç–∑—ã–≤–æ–≤ –≤ CSV —Ñ–æ—Ä–º–∞—Ç–µ`,
                status: "success",
                duration: 3000,
                isClosable: true,
            });
        } catch (error) {
            toast({
                title: "–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞",
                description: "–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ",
                status: "error",
                duration: 3000,
                isClosable: true,
            });
        }
    };

    const exportToJSON = () => {
        try {
            const exportData = {
                exportDate: new Date().toISOString(),
                totalRecords: data.length,
                appliedFilters: filters,
                reviews: data.map(item => ({
                    id: item.id,
                    date: item.date,
                    title: item.title,
                    text: item.text,
                    rating: item.rating,
                    city: item.city,
                    topics: item.topics,
                    sentiments: item.sentiments,
                    link: item.link
                }))
            };

            const jsonContent = JSON.stringify(exportData, null, 2);
            const blob = new Blob([jsonContent], { type: 'application/json' });
            const link = document.createElement('a');
            const url = URL.createObjectURL(blob);
            link.setAttribute('href', url);
            link.setAttribute('download', `reviews_export_${new Date().toISOString().split('T')[0]}.json`);
            link.style.visibility = 'hidden';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);

            toast({
                title: "–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω",
                description: `–í—ã–≥—Ä—É–∂–µ–Ω–æ ${data.length} –æ—Ç–∑—ã–≤–æ–≤ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ`,
                status: "success",
                duration: 3000,
                isClosable: true,
            });
        } catch (error) {
            toast({
                title: "–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞",
                description: "–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ",
                status: "error",
                duration: 3000,
                isClosable: true,
            });
        }
    };

    const generateReport = () => {
        try {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
            const stats = {
                total: data.length,
                positive: data.filter(r => r.sentiments?.includes("–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ")).length,
                negative: data.filter(r => r.sentiments?.includes("–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ")).length,
                neutral: data.filter(r => r.sentiments?.includes("–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ")).length
            };

            const validRatings = data.map(r => parseInt(r.rating)).filter(r => !isNaN(r));
            const avgRating = validRatings.length > 0
                ? (validRatings.reduce((a, b) => a + b, 0) / validRatings.length).toFixed(2)
                : '–ù/–î';

            // –¢–æ–ø —Ç–µ–º—ã
            const topicsCount = {};
            data.forEach(review => {
                review.topics?.forEach(topic => {
                    topicsCount[topic] = (topicsCount[topic] || 0) + 1;
                });
            });

            const topTopics = Object.entries(topicsCount)
                .sort(([, a], [, b]) => b - a)
                .slice(0, 5)
                .map(([topic, count]) => `${topic}: ${count} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π`)
                .join('\n');

            const reportContent = `
–û–¢–ß–ï–¢ –ü–û –ê–ù–ê–õ–ò–ó–£ –û–¢–ó–´–í–û–í
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${new Date().toLocaleString('ru-RU')}

–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
- –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: ${stats.total}
- –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö: ${stats.positive} (${(stats.positive / stats.total * 100).toFixed(1)}%)
- –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã—Ö: ${stats.neutral} (${(stats.neutral / stats.total * 100).toFixed(1)}%)
- –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö: ${stats.negative} (${(stats.negative / stats.total * 100).toFixed(1)}%)
- –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: ${avgRating}

–¢–û–ü –û–ë–°–£–ñ–î–ê–ï–ú–´–• –¢–ï–ú:
${topTopics}

–ü–†–ò–ú–ï–ù–ï–ù–ù–´–ï –§–ò–õ–¨–¢–†–´:
- –ü–µ—Ä–∏–æ–¥: ${filters.dateRange[0]}-${filters.dateRange[1]} –¥–Ω–µ–π
- –†–µ–π—Ç–∏–Ω–≥: ${filters.ratingRange[0]}-${filters.ratingRange[1]} –∑–≤–µ–∑–¥
- –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ–º—ã: ${filters.topics.join(', ') || '–í—Å–µ'}
- –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: ${filters.sentiments.join(', ') || '–í—Å–µ'}
- –ì–æ—Ä–æ–¥–∞: ${filters.cities.join(', ') || '–í—Å–µ'}
- –ü–æ–∏—Å–∫: ${filters.searchText || '–ù–µ –ø—Ä–∏–º–µ–Ω–µ–Ω'}

–û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω —Å–∏—Å—Ç–µ–º–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫.–¢–µ—Ö
      `.trim();

            const blob = new Blob([reportContent], { type: 'text/plain;charset=utf-8' });
            const link = document.createElement('a');
            const url = URL.createObjectURL(blob);
            link.setAttribute('href', url);
            link.setAttribute('download', `analytics_report_${new Date().toISOString().split('T')[0]}.txt`);
            link.style.visibility = 'hidden';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);

            toast({
                title: "–û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω",
                description: "–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω",
                status: "success",
                duration: 3000,
                isClosable: true,
            });
        } catch (error) {
            toast({
                title: "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞",
                description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç",
                status: "error",
                duration: 3000,
                isClosable: true,
            });
        }
    };

    const shareData = () => {
        if (navigator.share && data.length < 100) {
            navigator.share({
                title: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫',
                text: `–ê–Ω–∞–ª–∏–∑ ${data.length} –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã`,
                url: window.location.href,
            }).catch(() => {
                copyToClipboard();
            });
        } else {
            copyToClipboard();
        }
    };

    const copyToClipboard = () => {
        const summary = `
üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫

–í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: ${data.length}
–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö: ${data.filter(r => r.sentiments?.includes("–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ")).length}
–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö: ${data.filter(r => r.sentiments?.includes("–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ")).length}

–°—Å—ã–ª–∫–∞: ${window.location.href}
    `.trim();

        navigator.clipboard.writeText(summary).then(() => {
            toast({
                title: "–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ",
                description: "–ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞",
                status: "info",
                duration: 3000,
                isClosable: true,
            });
        });
    };

    const sendByEmail = () => {
        const subject = encodeURIComponent(`–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ - ${new Date().toLocaleDateString('ru-RU')}`);
        const body = encodeURIComponent(`
–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!

–ù–∞–ø—Ä–∞–≤–ª—è—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ –æ—Ç–∑—ã–≤–∞–º –∫–ª–∏–µ–Ω—Ç–æ–≤:
- –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: ${data.length}
- –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö: ${data.filter(r => r.sentiments?.includes("–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ")).length}
- –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö: ${data.filter(r => r.sentiments?.includes("–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ")).length}

–ü–æ–¥—Ä–æ–±–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ —Å—Å—ã–ª–∫–µ: ${window.location.href}

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫.–¢–µ—Ö
    `);

        window.location.href = `mailto:?subject=${subject}&body=${body}`;
    };

    return (
        <Menu>
            <Tooltip label="–≠–∫—Å–ø–æ—Ä—Ç –∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º–∏" placement="left">
                <MenuButton
                    as={Button}
                    leftIcon={<Icon as={FiDownload} />}
                    size="sm"
                    colorScheme="brand"
                    variant="outline"
                >
                    –≠–∫—Å–ø–æ—Ä—Ç
                </MenuButton>
            </Tooltip>
            <MenuList>
                <VStack align="start" spacing={0} w="full">
                    <Text fontSize="xs" color="gray.500" px={3} py={1} fontWeight="bold">
                        –§–û–†–ú–ê–¢–´ –î–ê–ù–ù–´–•
                    </Text>
                    <MenuItem onClick={exportToCSV} icon={<Icon as={FiFileText} />}>
                        <VStack align="start" spacing={0}>
                            <Text fontSize="sm">–°–∫–∞—á–∞—Ç—å CSV</Text>
                            <Text fontSize="xs" color="gray.500">
                                {data.length} —Å—Ç—Ä–æ–∫ –¥–ª—è Excel
                            </Text>
                        </VStack>
                    </MenuItem>
                    <MenuItem onClick={exportToJSON} icon={<Icon as={FiFileText} />}>
                        <VStack align="start" spacing={0}>
                            <Text fontSize="sm">–°–∫–∞—á–∞—Ç—å JSON</Text>
                            <Text fontSize="xs" color="gray.500">
                                –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                            </Text>
                        </VStack>
                    </MenuItem>
                    <MenuItem onClick={generateReport} icon={<Icon as={FiFileText} />}>
                        <VStack align="start" spacing={0}>
                            <Text fontSize="sm">–°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç</Text>
                            <Text fontSize="xs" color="gray.500">
                                –¢–µ–∫—Å—Ç–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
                            </Text>
                        </VStack>
                    </MenuItem>
                </VStack>

                <MenuDivider />

                <VStack align="start" spacing={0} w="full">
                    <Text fontSize="xs" color="gray.500" px={3} py={1} fontWeight="bold">
                        –ü–û–î–ï–õ–ò–¢–¨–°–Ø
                    </Text>
                    <MenuItem onClick={shareData} icon={<Icon as={FiShare2} />}>
                        <Text fontSize="sm">–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π</Text>
                    </MenuItem>
                    <MenuItem onClick={sendByEmail} icon={<Icon as={FiMail} />}>
                        <Text fontSize="sm">–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ –ø–æ—á—Ç–µ</Text>
                    </MenuItem>
                </VStack>
            </MenuList>
        </Menu>
    );
}